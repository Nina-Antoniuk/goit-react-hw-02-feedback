{"version":3,"sources":["components/Section/Section.js","components/Feedback/Feedback.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","title","children","className","Feedback","props","options","onLeaveFeedback","Object","keys","map","key","onClick","type","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","clickHandler","e","content","target","textContent","setState","prevState","countTotalFeedback","values","reduce","acc","el","countPositiveFeedbackPercentage","percentage","toFixed","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSASeA,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,MCoBQE,MAxBf,SAAkBC,GAChB,IAAQC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,gBAEjB,OACE,mCACE,oBAAIJ,UAAU,OAAd,SACGK,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GACxB,OACE,oBAAIR,UAAU,WAAd,SACE,wBACEA,UAAU,WACVS,QAASL,EACTM,KAAK,SAHP,SAKGF,KANyBA,WCJ3BG,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCUEC,MAXf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qCACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,kDAAqBC,OACrB,gEAAmCC,WCAnCC,E,4MACJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,aAAe,SAAAC,GACb,IAAMC,EAAUD,EAAEE,OAAOC,YAEzB,OAAO,EAAKC,UAAS,SAAAC,GAAS,sBAC3BJ,EAAUI,EAAUJ,GAAW,O,EAIpCK,mBAAqB,WACnB,OAAOvB,OAAOwB,OAAO,EAAKT,OAAOU,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAOC,M,EAG/DC,gCAAkC,WAChC,qBAAQb,EAAR,EAAQA,MAAOQ,EAAf,EAAeA,mBACTM,EAA2B,IAAbd,EAAMN,KAAcc,IAExC,MAAM,GAAN,OAAUA,IAAuB,EAAIM,EAAWC,QAAQ,GAAK,EAA7D,M,4CAGF,WACE,MAA+BC,KAAKhB,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACfY,EAAwDQ,KAAxDR,mBAAoBK,EAAoCG,KAApCH,gCAE5B,OACE,sBAAKjC,UAAU,UAAf,UACE,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CAAUK,QAASiC,KAAKhB,MAAOhB,gBAAiBgC,KAAKf,iBAGvD,cAAC,EAAD,CAASvB,MAAM,aAAf,SACG8B,IACC,cAAC,EAAD,CACEd,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOW,EACPV,mBAAoBe,IAGtB,cAAC,EAAD,CAAcrB,QAAQ,+B,GA9ChByB,aAsDHlB,ICxDfmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ff2e2258.chunk.js","sourcesContent":["function Section({ title, children }) {\n  return (\n    <section>\n      <h2 className=\"title\">{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nexport default Section;\n","function Feedback(props) {\n  const { options, onLeaveFeedback } = props;\n\n  return (\n    <>\n      <ul className=\"list\">\n        {Object.keys(options).map(key => {\n          return (\n            <li className=\"listItem\" key={key}>\n              <button\n                className=\"reaction\"\n                onClick={onLeaveFeedback}\n                type=\"button\"\n              >\n                {key}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nexport default Feedback;\n","function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nexport default Notification;\n","function Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      <p>Good - {good}</p>\n      <p>Neutral - {neutral}</p>\n      <p>Bad - {bad}</p>\n      <p>Total feedback - {total()}</p>\n      <p>Positive feedback percentage - {positivePercentage()}</p>\n    </>\n  );\n}\nexport default Statistics;\n","import { Component } from 'react';\nimport './App.css';\nimport Section from './components/Section';\nimport Feedback from './components/Feedback';\nimport Notification from './components/Notification';\nimport Statistics from './components/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  clickHandler = e => {\n    const content = e.target.textContent;\n\n    return this.setState(prevState => ({\n      [content]: prevState[content] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, el) => (acc += el));\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { state, countTotalFeedback } = this;\n    const percentage = (state.good * 100) / countTotalFeedback();\n\n    return `${countTotalFeedback() > 0 ? percentage.toFixed(2) : 0}%`;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const { countTotalFeedback, countPositiveFeedbackPercentage } = this;\n\n    return (\n      <div className=\"wrapper\">\n        <Section title=\"Please leave feedback\">\n          <Feedback options={this.state} onLeaveFeedback={this.clickHandler} />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback}\n              positivePercentage={countPositiveFeedbackPercentage}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}