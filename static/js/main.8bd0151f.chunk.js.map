{"version":3,"sources":["components/Statistics/Statistics.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","App","state","clickHandler","e","content","target","textContent","setState","prevState","countTotalFeedback","Object","values","reduce","acc","el","countPositiveFeedbackPercentage","percentage","toFixed","this","keys","map","key","onClick","type","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAYeA,MAZf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,gCACE,oBAAIC,UAAU,QAAd,wBACA,wCAAWL,KACX,2CAAcC,KACd,uCAAUC,KACV,kDAAqBC,OACrB,gEAAmCC,WCJnCE,E,4MACJC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPM,aAAe,SAAAC,GACb,IAAMC,EAAUD,EAAEE,OAAOC,YAEzB,OAAO,EAAKC,UAAS,SAAAC,GAAS,sBAC3BJ,EAAUI,EAAUJ,GAAW,O,EAIpCK,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKV,OAAOW,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAOC,M,EAG/DC,gCAAkC,WAChC,qBAAQd,EAAR,EAAQA,MAAOQ,EAAf,EAAeA,mBACTO,EAA2B,IAAbf,EAAMP,KAAce,IAExC,MAAM,GAAN,OAAUA,IAAuB,EAAIO,EAAWC,QAAQ,GAAK,EAA7D,M,4CAGF,WAAU,IAAD,OACP,EAA+BC,KAAKjB,MAA5BP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACfa,EAAwDS,KAAxDT,mBAAoBM,EAAoCG,KAApCH,gCAE5B,OACE,0BAAShB,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,mCACA,oBAAIA,UAAU,OAAd,SACGW,OAAOS,KAAKD,KAAKjB,OAAOmB,KAAI,SAAAC,GAC3B,OACE,oBAAItB,UAAU,WAAd,SACE,wBACEA,UAAU,WACVuB,QAAS,EAAKpB,aACdqB,KAAK,SAHP,SAKGF,KANyBA,QAanCZ,IACC,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,EACPX,mBAAoBiB,IAGtB,U,GA1DQS,aAiEHxB,IChEfyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8bd0151f.chunk.js","sourcesContent":["function Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <div>\n      <h2 className=\"title\">Statistics</h2>\n      <p>Good - {good}</p>\n      <p>Neutral - {neutral}</p>\n      <p>Bad - {bad}</p>\n      <p>Total feedback - {total()}</p>\n      <p>Positive feedback percentage - {positivePercentage()}</p>\n    </div>\n  );\n}\nexport default Statistics;\n","import { Component } from 'react';\nimport './App.css';\nimport Statistics from './components/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  clickHandler = e => {\n    const content = e.target.textContent;\n\n    return this.setState(prevState => ({\n      [content]: prevState[content] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, el) => (acc += el));\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { state, countTotalFeedback } = this;\n    const percentage = (state.good * 100) / countTotalFeedback();\n\n    return `${countTotalFeedback() > 0 ? percentage.toFixed(2) : 0}%`;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const { countTotalFeedback, countPositiveFeedbackPercentage } = this;\n\n    return (\n      <section className=\"section\">\n        <h1 className=\"title\">Please leave feedback</h1>\n        <ul className=\"list\">\n          {Object.keys(this.state).map(key => {\n            return (\n              <li className=\"listItem\" key={key}>\n                <button\n                  className=\"reaction\"\n                  onClick={this.clickHandler}\n                  type=\"button\"\n                >\n                  {key}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback}\n            positivePercentage={countPositiveFeedbackPercentage}\n          />\n        ) : (\n          ''\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}